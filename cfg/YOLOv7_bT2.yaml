# parameters
nc: 2  # number of classes
depth_multiple: 1.0  # model depth multiple
width_multiple: 1.0  # layer channel multiple
HeadOut: 68


# [from, module, args]
# from：输入来自那一层，-1代表上一次，1代表第1层，3代表第3层
# module：子模块
# args：模块参数，channel_in，channel_out，kernel_size，stride，padding，bias等]

backbone:
  # [from, number, module, args]
  [[-1, 1, Conv, [32, 3, 2, None, 1, nn.LeakyReLU(0.1)]],  # 0-P1/2       320
  
   [-1, 1, Conv, [64, 3, 2, None, 1, nn.LeakyReLU(0.1)]],  # 1-P2/4      160
   
   # E-ELAN
   [-1, 1, Conv, [32, 1, 1, None, 1, nn.LeakyReLU(0.1)]],              # 160
   [-2, 1, Conv, [32, 1, 1, None, 1, nn.LeakyReLU(0.1)]],              # 160
   [-1, 1, Conv, [32, 3, 1, None, 1, nn.LeakyReLU(0.1)]],              # 160
   [-1, 1, Conv, [32, 3, 1, None, 1, nn.LeakyReLU(0.1)]],              # 160
   [[-1, -2, -3, -4], 1, Concat, [1]],                                     # 160
   # E-ELAN
   [-1, 1, Conv, [64, 1, 1, None, 1, nn.LeakyReLU(0.1)]],  # 7        # 160
   
     # MPConv
   [-1, 1, MP, []],  # 8-P3/8                                              # 80
   [-1, 1, Conv, [64, 1, 1, None, 1, nn.LeakyReLU(0.1)]],                  # 80
   [-2, 1, Conv, [64, 1, 1, None, 1, nn.LeakyReLU(0.1)]],                  # 80
   [-1, 1, Conv, [64, 3, 1, None, 1, nn.LeakyReLU(0.1)]],                  # 80
   [-1, 1, Conv, [64, 3, 1, None, 1, nn.LeakyReLU(0.1)]],                  # 80
   [[-1, -2, -3, -4], 1, Concat, [1]],                                     # 80
     # MPConv
   [-1, 1, Conv, [128, 1, 1, None, 1, nn.LeakyReLU(0.1)]],  # 14      # 80

     # MPConv
   [-1, 1, MP, []],  # 15-P4/16                                            # 40
   [-1, 1, Conv, [128, 1, 1, None, 1, nn.LeakyReLU(0.1)]],                 # 40
   [-2, 1, Conv, [128, 1, 1, None, 1, nn.LeakyReLU(0.1)]],                 # 40
   [-1, 1, Conv, [128, 3, 1, None, 1, nn.LeakyReLU(0.1)]],                 # 40
   [-1, 1, Conv, [128, 3, 1, None, 1, nn.LeakyReLU(0.1)]],                 # 40
   [[-1, -2, -3, -4], 1, Concat, [1]],                                     # 40
     # MPConv
   [-1, 1, Conv, [256, 1, 1, None, 1, nn.LeakyReLU(0.1)]],  # 21      # 40
   
      # MPConv
   [-1, 1, MP, []],  # 22-P5/32                                            # 20
   [-1, 1, Conv, [256, 1, 1, None, 1, nn.LeakyReLU(0.1)]],                 # 20
   [-2, 1, Conv, [256, 1, 1, None, 1, nn.LeakyReLU(0.1)]],                 # 20
   [-1, 1, Conv, [256, 3, 1, None, 1, nn.LeakyReLU(0.1)]],                 # 20
   [-1, 1, Conv, [256, 3, 1, None, 1, nn.LeakyReLU(0.1)]],                 # 20
   [[-1, -2, -3, -4], 1, Concat, [1]],                                     # 20
    # MPConv
   [-1, 1, Conv, [512, 1, 1, None, 1, nn.LeakyReLU(0.1)]],  # 28     # 20
  ]










Neck:
  [[-1, 1, Conv, [256, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
   [-2, 1, Conv, [256, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
   [-1, 1, SP, [5]],
   [-2, 1, SP, [9]],
   [-3, 1, SP, [13]],
   [[-1, -2, -3, -4], 1, Concat, [1]],

   [-1, 1, Conv, [256, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
   [[-1, -7], 1, Concat, [1]],
   [-1, 1, Conv, [256, 1, 1, None, 1, nn.LeakyReLU(0.1)]],  # 37
  
   [-1, 1, Conv, [128, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [21, 1, Conv, [128, 1, 1, None, 1, nn.LeakyReLU(0.1)]], # route backbone P4
   [[-1, -2], 1, Concat, [1]],
 # E-ELAN
   [-1, 1, Conv, [64, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
   [-2, 1, Conv, [64, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
   [-1, 1, Conv, [64, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
   [-1, 1, Conv, [64, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
   [[-1, -2, -3, -4], 1, Concat, [1]],
 # E-ELAN
   [-1, 1, Conv, [128, 1, 1, None, 1, nn.LeakyReLU(0.1)]],  # 47
  
   [-1, 1, Conv, [64, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [14, 1, Conv, [64, 1, 1, None, 1, nn.LeakyReLU(0.1)]], # route backbone P3
   [[-1, -2], 1, Concat, [1]], # 51
  ]


Head:
 [[ 51, 1, Conv, [128, 1, 1]],   #52       
    

    [-1, 1, Upsample, [None, 2, 'nearest']],  #53                          # 160
# E-ELAN 
    [-1, 1, Conv, [16, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
    [-2, 1, Conv, [16, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
    [-1, 1, Conv, [16, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
    [-1, 1, Conv, [16, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
    [[-1, -2, -3, -4], 1, Concat, [1]],                                    # 160                              
# E-ELAN                               
    [ -1, 1, Conv, [32, 3, 1]],    #59                                 # 160
    [ -1, 1, Upsample, [None, 2, 'nearest']],  #60                         # 320
    [ -1, 1, Conv, [16, 3, 1]],    #61                                 # 320
# E-ELAN
    [-1, 1, Conv, [2, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
    [-2, 1, Conv, [2, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
    [-1, 1, Conv, [2, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
    [-1, 1, Conv, [2, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
    [[-1, -2, -3, -4], 1, Concat, [1]],                                    # 320                              
# E-ELAN                               
    [ -1, 1, Upsample, [None, 2, 'nearest']],  #67                         # 640
    [ -1, 1, Conv, [nc, 3, 1]], #68                                      # 640
 ]
